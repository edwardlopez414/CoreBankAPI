// <auto-generated />
using System;
using CoreBankAPI.CoreDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoreBankAPI.Migrations
{
    [DbContext(typeof(CoreDb))]
    partial class CoreDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.16");

            modelBuilder.Entity("CoreBankAPI.Data.AccoutDta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("Balance")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Balance");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT")
                        .HasColumnName("Currency");

                    b.Property<bool>("Isactive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Isactive");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("TEXT")
                        .HasColumnName("Registered");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.Property<string>("identifier")
                        .HasColumnType("TEXT")
                        .HasColumnName("identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("CoreBankAPI.Data.TransactionDta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Accountid");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Amount");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<bool?>("Isreversed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Isreversed");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("CoreBankAPI.Data.UserDta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("Birthdate");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT")
                        .HasColumnName("Gender");

                    b.Property<string>("Idnumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("Idnumber");

                    b.Property<string>("Idtype")
                        .HasColumnType("TEXT")
                        .HasColumnName("Idtype");

                    b.Property<int>("Income")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Income");

                    b.Property<bool>("Isactive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Isactive");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastName");

                    b.Property<string>("LastName2")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastName2");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT")
                        .HasColumnName("MiddleName");

                    b.Property<DateTime?>("Registered")
                        .HasColumnType("TEXT")
                        .HasColumnName("Registered");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("CoreBankAPI.Data.AccoutDta", b =>
                {
                    b.HasOne("CoreBankAPI.Data.UserDta", "User")
                        .WithOne("account")
                        .HasForeignKey("CoreBankAPI.Data.AccoutDta", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreBankAPI.Data.TransactionDta", b =>
                {
                    b.HasOne("CoreBankAPI.Data.AccoutDta", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreBankAPI.Data.AccoutDta", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CoreBankAPI.Data.UserDta", b =>
                {
                    b.Navigation("account")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
